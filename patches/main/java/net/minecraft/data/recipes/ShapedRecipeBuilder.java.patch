--- a/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
+++ b/main/java/net/minecraft/data/recipes/ShapedRecipeBuilder.java
@@ -58,9 +58,9 @@
 
    public ShapedRecipeBuilder m_126124_(Character p_126125_, Ingredient p_126126_) {
       if (this.f_126109_.containsKey(p_126125_)) {
-         throw new IllegalArgumentException("Symbol '" + p_126125_ + "' is already defined!");
+         throw new IllegalArgumentException("シンボル '"+ p_126125_ +"'はすでに定義されています！");
       } else if (p_126125_ == ' ') {
-         throw new IllegalArgumentException("Symbol ' ' (whitespace) is reserved and cannot be defined");
+         throw new IllegalArgumentException("記号 ' '(空白)は予約されており、定義できません");
       } else {
          this.f_126109_.put(p_126125_, p_126126_);
          return this;
@@ -69,7 +69,7 @@
 
    public ShapedRecipeBuilder m_126130_(String p_126131_) {
       if (!this.f_126108_.isEmpty() && p_126131_.length() != this.f_126108_.get(0).length()) {
-         throw new IllegalArgumentException("Pattern must be the same width on every line!");
+         throw new IllegalArgumentException("パターンはすべての行で同じ幅でなければなりません!");
       } else {
          this.f_126108_.add(p_126131_);
          return this;
@@ -93,7 +93,7 @@
    public void m_126137_(Consumer<FinishedRecipe> p_126138_, String p_126139_) {
       ResourceLocation resourcelocation = Registry.f_122827_.m_7981_(this.f_126106_);
       if ((new ResourceLocation(p_126139_)).equals(resourcelocation)) {
-         throw new IllegalStateException("Shaped Recipe " + p_126139_ + " should remove its 'save' argument");
+         throw new IllegalStateException("Shaped Recipe "+ p_126139_ +" は 'save'引数を削除する必要があります");
       } else {
          this.m_126140_(p_126138_, new ResourceLocation(p_126139_));
       }
@@ -107,7 +107,7 @@
 
    private void m_126143_(ResourceLocation p_126144_) {
       if (this.f_126108_.isEmpty()) {
-         throw new IllegalStateException("No pattern is defined for shaped recipe " + p_126144_ + "!");
+         throw new IllegalStateException("成形レシピのパターンは定義されていません! : " + p_126144_);
       } else {
          Set<Character> set = Sets.newHashSet(this.f_126109_.keySet());
          set.remove(' ');
@@ -116,7 +116,7 @@
             for(int i = 0; i < s.length(); ++i) {
                char c0 = s.charAt(i);
                if (!this.f_126109_.containsKey(c0) && c0 != ' ') {
-                  throw new IllegalStateException("Pattern in recipe " + p_126144_ + " uses undefined symbol '" + c0 + "'");
+                  throw new IllegalStateException("レシピのパターン" + p_126144_ + "は未定義の記号を使用します '" + c0 + "'");
                }
 
                set.remove(c0);
@@ -124,11 +124,11 @@
          }
 
          if (!set.isEmpty()) {
-            throw new IllegalStateException("Ingredients are defined but not used in pattern for recipe " + p_126144_);
+            throw new IllegalStateException("材料は定義されていますが、レシピのパターンでは使用されていません " + p_126144_);
          } else if (this.f_126108_.size() == 1 && this.f_126108_.get(0).length() == 1) {
-            throw new IllegalStateException("Shaped recipe " + p_126144_ + " only takes in a single item - should it be a shapeless recipe instead?");
+            throw new IllegalStateException("形のレシピ "+ p_126144_ +" は1つのアイテムしか取り込めません-代わりに形のないレシピにする必要がありますか?");
          } else if (this.f_126110_.m_138405_().isEmpty()) {
-            throw new IllegalStateException("No way of obtaining recipe " + p_126144_);
+            throw new IllegalStateException("レシピを入手する方法がない "+ p_126144_);
          }
       }
    }
